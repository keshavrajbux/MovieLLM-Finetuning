#!/usr/bin/env python3
"""
Script to scrape movie data for fine-tuning and RAG implementation
"""

import os
import requests
import pandas as pd
import time
import random
import json
from tqdm import tqdm
import csv
import re

# Create output directories
os.makedirs('data/raw', exist_ok=True)
os.makedirs('data/processed', exist_ok=True)

# API Keys (replace with your keys)
OMDB_API_KEY = "YOUR_OMDB_API_KEY"
TMDB_API_KEY = "YOUR_TMDB_API_KEY"

# List of top movies (IMDb Top 250)
TOP_MOVIES = [
    "The Shawshank Redemption", "The Godfather", "The Dark Knight", "The Godfather Part II",
    "12 Angry Men", "Schindler's List", "The Lord of the Rings: The Return of the King",
    "Pulp Fiction", "The Lord of the Rings: The Fellowship of the Ring", "The Good, the Bad and the Ugly",
    "Forrest Gump", "Fight Club", "The Lord of the Rings: The Two Towers", "Inception",
    "The Matrix", "Goodfellas", "One Flew Over the Cuckoo's Nest", "Se7en", "The Silence of the Lambs",
    "Saving Private Ryan", "Interstellar", "The Green Mile", "Star Wars: Episode IV - A New Hope",
    "Terminator 2: Judgment Day", "Back to the Future", "Spirited Away", "The Pianist",
    "Psycho", "Parasite", "The Lion King", "Gladiator", "American History X", "The Usual Suspects",
    "The Departed", "Whiplash", "The Intouchables", "Modern Times", "Once Upon a Time in the West",
    "Casablanca", "City Lights", "Rear Window", "The Great Dictator", "Raiders of the Lost Ark",
    "The Lives of Others", "Sunset Boulevard", "Paths of Glory", "The Shining", "The Great Escape"
]

# List of genres to ensure balanced dataset
GENRES = [
    "Action", "Adventure", "Animation", "Comedy", "Crime", "Documentary", "Drama",
    "Family", "Fantasy", "History", "Horror", "Music", "Mystery", "Romance",
    "Science Fiction", "TV Movie", "Thriller", "War", "Western"
]

def fetch_omdb_data(title):
    """Fetch movie data from OMDB API"""
    url = f"http://www.omdbapi.com/?apikey={OMDB_API_KEY}&t={title}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    return None

def fetch_tmdb_movie_id(title):
    """Fetch movie ID from TMDB API"""
    url = f"https://api.themoviedb.org/3/search/movie?api_key={TMDB_API_KEY}&query={title}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        if data['results']:
            return data['results'][0]['id']
    return None

def fetch_tmdb_reviews(movie_id):
    """Fetch reviews for a movie from TMDB API"""
    url = f"https://api.themoviedb.org/3/movie/{movie_id}/reviews?api_key={TMDB_API_KEY}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return [review['content'] for review in data['results']]
    return []

def generate_prompts(movie_data):
    """Generate instruction prompts for fine-tuning"""
    prompts = []
    
    # Basic movie information
    prompts.append({
        'instruction': f"Describe the plot of {movie_data['Title']}",
        'input': f"What is the plot of {movie_data['Title']}?",
        'response': movie_data['Plot']
    })
    
    # Cast information
    prompts.append({
        'instruction': f"List the main cast of {movie_data['Title']}",
        'input': f"Who are the main actors in {movie_data['Title']}?",
        'response': f"The main cast of {movie_data['Title']} includes: {movie_data['Actors']}"
    })
    
    # Director information
    prompts.append({
        'instruction': f"Who directed {movie_data['Title']}?",
        'input': f"Who is the director of {movie_data['Title']}?",
        'response': f"{movie_data['Title']} was directed by {movie_data['Director']}"
    })
    
    # Genre-based recommendations
    prompts.append({
        'instruction': f"Recommend movies similar to {movie_data['Title']}",
        'input': f"I enjoyed {movie_data['Title']} ({movie_data['Genre']}). Can you recommend similar movies?",
        'response': f"Based on your enjoyment of {movie_data['Title']}, here are some similar {movie_data['Genre']} films you might like: [Recommendations would be generated by the model]"
    })
    
    # Rating and reviews
    prompts.append({
        'instruction': f"What is the rating of {movie_data['Title']}?",
        'input': f"What are the ratings and reviews for {movie_data['Title']}?",
        'response': f"{movie_data['Title']} has an IMDb rating of {movie_data['imdbRating']}/10 and has received critical acclaim."
    })
    
    return prompts

def main():
    """Main function to collect and process movie data"""
    all_prompts = []
    
    print("Starting movie data collection...")
    
    for title in tqdm(TOP_MOVIES):
        try:
            # Fetch data from OMDB
            omdb_data = fetch_omdb_data(title)
            if not omdb_data or omdb_data.get('Response') == 'False':
                print(f"Could not fetch data for {title}")
                continue
            
            # Fetch TMDB ID
            tmdb_id = fetch_tmdb_movie_id(title)
            if tmdb_id:
                # Fetch reviews
                reviews = fetch_tmdb_reviews(tmdb_id)
                if reviews:
                    omdb_data['Reviews'] = reviews
            
            # Generate prompts
            prompts = generate_prompts(omdb_data)
            all_prompts.extend(prompts)
            
            # Save raw data
            with open(f'data/raw/{title.replace(" ", "_").lower()}.json', 'w') as f:
                json.dump(omdb_data, f, indent=2)
            
            # Random delay to avoid rate limiting
            time.sleep(random.uniform(1, 3))
            
        except Exception as e:
            print(f"Error processing {title}: {str(e)}")
            continue
    
    # Save processed prompts
    df = pd.DataFrame(all_prompts)
    df.to_csv('data/processed/movie_conversations.csv', index=False)
    
    print(f"\nData collection complete! Generated {len(all_prompts)} prompts.")
    print("Files saved in data/raw/ and data/processed/ directories.")

if __name__ == "__main__":
    main()
